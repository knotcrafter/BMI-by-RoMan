import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª–µ .env")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞—Å—á—ë—Ç–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç BMI")]],
    resize_keyboard=True
)


@dp.message(Command("start"))
async def start_command(message: Message):
    user_name = message.from_user.first_name
    await message.answer(
        f"–•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –Ω–∞ –¥–∏–≤–∞–Ω–µ, {user_name}! üöÄ\n–ü–æ—Ä–∞ —É–∑–Ω–∞—Ç—å, –≤ –∫–∞–∫–æ–π –≤—ã —Ñ–æ—Ä–º–µ! üí™\n–Ø –±—ã—Å—Ç—Ä–æ –ø–æ—Å—á–∏—Ç–∞—é –≤–∞—à BMI –∏ –ø–æ–º–æ–≥—É –ø–æ–Ω—è—Ç—å, –∫—É–¥–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ. üòè\n–ù–∞–∂–∏–º–∞–π—Ç–µ '–ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç BMI' –∏ –¥–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è!",
        reply_markup=keyboard
    )


@dp.message(lambda message: message.text == "üîÑ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç BMI")
async def start_bmi(message: Message):
    user_data[message.from_user.id] = {}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")


@dp.message()
async def get_weight_or_height(message: Message):
    user_id = message.from_user.id
    text = message.text.replace(",", ".")

    try:
        value = float(text)

        if user_id not in user_data or "weight" not in user_data[user_id]:
            user_data[user_id] = {"weight": value}
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ –º–µ—Ç—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 1.75):")
        else:
            user_data[user_id]["height"] = value
            weight = user_data[user_id]["weight"]
            height = user_data[user_id]["height"]

            if height <= 0:
                await message.answer("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
                return

            bmi = weight / (height ** 2)
            category = get_bmi_category(bmi)

            await message.answer(f"üìä –¢–≤–æ–π BMI: {bmi:.2f}\n{category}", reply_markup=keyboard)
            user_data.pop(user_id, None)

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 70 (–≤–µ—Å) –∏–ª–∏ 1.75 (—Ä–æ—Å—Ç).")


def get_bmi_category(bmi):
    if bmi < 18.5:
        return "üòÖ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–µ—Å–∞ (–Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø–µ–ª—å–º–µ–Ω–µ–π ü•ü)"
    elif 18.5 <= bmi < 24.9:
        return "‚úÖ –ù–æ—Ä–º–∞ (—Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™)"
    elif 25 <= bmi < 29.9:
        return "‚ö†Ô∏è –ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å (–º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å—Å—è üèãÔ∏è‚Äç‚ôÇÔ∏è)"
    else:
        return "üö® –û–∂–∏—Ä–µ–Ω–∏–µ (–≤—Ä–µ–º—è –ø–æ–¥—Ä—É–∂–∏—Ç—å—Å—è —Å –±–µ–≥–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–æ–π! üèÉ)"


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
